/*
 Copyright 2016 Goldman Sachs.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
 */

/* Generated By:JJTree: Do not edit this line. SimpleNode.java */


package com.gs.fw.common.mithra.generator.queryparser;

import com.gs.fw.common.mithra.generator.MithraExpressionNode;
import com.gs.fw.common.mithra.generator.MithraObjectTypeWrapper;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class SimpleNode implements Node, MithraExpressionNode 
{
  protected Node parent;
  protected Node[] children;
  protected int id;
  protected MithraQL parser;

  public SimpleNode(int i) 
  {
    this.id = i;
  }

  public SimpleNode(MithraQL p, int i) 
  {
    this(i);
    this.parser = p;
  }

  public void jjtOpen() {}

  public void jjtClose() {}
  
  public void jjtSetParent(Node n) { this.parent = n; }
  public Node jjtGetParent() { return this.parent; }

  public void jjtAddChild(Node n, int i) 
  {
    if (this.children == null) {
      this.children = new Node[i + 1];
    } else if (i >= this.children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(this.children, 0, c, 0, this.children.length);
      this.children = c;
    }
    this.children[i] = n;
  }

  public Node jjtGetChild(int i) 
  {
    return this.children[i];
  }

  public int jjtGetNumChildren() 
  {
    return (this.children == null) ? 0 : this.children.length;
  }

  /** Accept the visitor. **/
  public Object jjtAccept(MithraQLVisitor visitor, Object data) 
  {
      return visitor.visit(this, data);
  }

    /** Accept the visitor. **/
    public Object childrenAccept(MithraQLVisitor visitor, Object data) 
    {
      visitor.visit(this, data);
      if (this.children != null) {
        for (int i = 0; i < this.children.length; ++i) {
             this.children[i].jjtAccept(visitor, data);
            ((SimpleNode)this.children[i]).childrenAccept( visitor, data );
        }
      }
      return data;
    }

    /** Accept the visitor. **/
    public Object childrenPolymorphicAccept(MithraQLVisitor visitor, Object data) 
    {
      this.jjtAccept(visitor, data);
      if (this.children != null) {
        for (int i = 0; i < this.children.length; ++i) {
             this.children[i].jjtAccept(visitor, data);
            ((SimpleNode)this.children[i]).childrenAccept( visitor, data );
        }
      }
      return data;
    }

    public void checkConsistency(MithraObjectTypeWrapper owner, Map allObjects, List<String> errors)
    {
        // nothing to do. subclasses should override when there is something to check
    }

    public void addImport(MithraObjectTypeWrapper owner, Map allObjects, List<String> errors)
    {
        // nothing to do. subclasses should override when there is something to check
    }
  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return MithraQLTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) 
  {
    System.out.println(toString(prefix));
    if (this.children != null) 
    {
      for (int i = 0; i < children.length; ++i) 
      {
    	SimpleNode n = (SimpleNode)children[i];
    	if (n != null) 
        {
	        n.dump(prefix + " ");
	    }
      }
    }
  }

    public void addDependentClassesToSet(Set set)
    {
        if (this.children != null) for(int i=0;i<this.children.length;i++)
        {
            SimpleNode s = (SimpleNode) this.children[i];
            s.addDependentClassesToSet(set);
        }
    }

    public void reAlignForOwner(MithraObjectTypeWrapper owner)
    {
        if (this.children != null) for(int i=0;i<this.children.length;i++)
        {
            SimpleNode s = (SimpleNode) this.children[i];
            s.reAlignForOwner(owner);
        }
    }

    public List getEqualityRelationalExpressions(MithraObjectTypeWrapper from, MithraObjectTypeWrapper to)
    {
        ArrayList result = new ArrayList();
        if (this.children != null) for(int i=0;i<this.children.length;i++)
        {
            SimpleNode s = (SimpleNode) this.children[i];
            result.addAll(s.getEqualityRelationalExpressions(from,to));
        }
        return result;
    }

    public boolean isJoin()
    {
        return false;
    }

    public void addLeafLevelExpressionsToList(List list)
    {
        // nothing to do; children must override
    }

    public List getChainedExpressions()
    {
        ArrayList result = new ArrayList(1);
        result.add(this);
        return result;
    }

    public String getFinderString()
    {
        throw new RuntimeException("not implemented in "+this.getClass().getName());
    }

    public boolean equalsOther(SimpleNode other)
    {
        throw new RuntimeException("not implemented");
    }

    public String constructFilterExpr()
    {
        // nothing to do
        return "";
    }
}

