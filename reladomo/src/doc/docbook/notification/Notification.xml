<?xml version="1.0"?>


<!--
  Copyright 2016 Goldman Sachs.
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
  -->

<article xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="../xsd/docbook.xsd">

    <articleinfo>
        <title>Reladomo Notification</title>
    </articleinfo>

    <section>
        <title>What is &quot;Reladomo Notification&quot; and when do I need it?</title>

        <para>
            When you have multiple JVMs connecting to a DB via Reladomo, you need to keep each JVM up-to-date with
            changes made by any of the other JVMs.
            Reladomo Notification is the primary mechanism for achieving this and keeping each JVMs Reladomo cache fresh.
        </para>
        <para>
            If you only have one JVM accessing a DB, you donâ€™t need Notification.
        </para>
        <para>
            You will need Notification in any of the following situations:
            <itemizedlist>
                <listitem>
                    <para>Two or more JVMs accessing a single DB</para>
                </listitem>
                <listitem>
                    <para>An app server, plus a separate &quot;batch updater&quot; process</para>
                </listitem>
                <listitem>
                    <para>You have hot-hot or hot-warm redundant processes</para>
                </listitem>
            </itemizedlist>
        </para>
    </section>

    <section>
        <title>When does Notification not help?</title>

        <para>
            Notification doesn't help when one or more of your processes are not Reladomo JVM based,
            since the notifications are generated by Reladomo itself.
            There are strategies for managing this situation, but are less granular than what Reladomo offers,
            and you should consult your local Reladomo expert before implementing.
        </para>
    </section>

    <section>
        <title>How does Reladomo Notification work?</title>

        <para>
            When DB data is changed by a Reladomo process, &quot;notifications&quot; of these changes are broadcast via some
            communication mechanism to all other Reladomo clients in your notification &quot;realm&quot;.
        </para>

        <figure>
            <title>Notification Communication</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="notificationCommunication.png" format="png" width="100%" scalefit="1"/>
                </imageobject>

                <textobject>
                    <phrase>Notification Communication</phrase>
                </textobject>
            </mediaobject>
        </figure>
    </section>

    <section>
        <title>What &quot;communication mechanisms&quot; are available?</title>

        <para>
            The easiest to use (and is appropriate in 99.9% of use-cases) is TCP/IP.
            There also exists an RV implementation or you could implement your own mechanism
            (neither are recommended though, and not discussed in this document).
        </para>
    </section>

    <section>
        <title>What does the TCP-based Notification service involve?</title>

        <para>
            Using classes provided with Reladomo, you can perform some simple configuration to enable Notification.
        </para>

        <figure>
            <title>TCP Communication</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="tcpCommunication.png" format="png" width="100%" scalefit="1"/>
                </imageobject>

                <textobject>
                    <phrase>TCP Communication</phrase>
                </textobject>
            </mediaobject>
        </figure>

        <para>
            The Notification Server is the central point that all JVMs will register with,
            and is responsible for forwarding notifications.
        </para>

        <important>
            <title>Note:</title>
            <para>
                You will only have a second Notification server if you are using the &quot;dual&quot; communication mechanism.
            </para>
        </important>

        <para>
            A Notification server requires only a small amount of memory and CPU to execute, and is highly reliable
            - the biggest threats to a Notification server are:
            admin error or a machine failure (including unplanned power-down).
            To protect against one of these, we recommend using &quot;keep-alive&quot; to monitor the process
            and re-start it if it should ever go down in your Prod environment.
        </para>

        <para>
            There are two varieties of TCP notifications: single notification and dual notification,
            and both leverage TCP/IP sockets.
            In practice, TCP communication is occasionally unreliable for brief periods,
            so Reladomo TCP notification supports re-tries to help ensure no data is lost:
            <itemizedlist>
                <listitem>
                    <para>
                        If a JVM loses its connection to a Notification server,
                        it will periodically try to re-establish until it a connection is successfully made.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        If a Notification server loses a connection to a client, it will try to re-connect for a period,
                        and if unsuccessful, will drop the client from its broadcast list.
                        A client can re-join a server at any time, even if it was dropped from its broadcast list.
                    </para>
                </listitem>
            </itemizedlist>
        </para>

        <para>
            There are two varieties of TCP-based communication mechanisms:
            single notification (good for most use-cases)
            and dual notification (used when extreme redundancy and a low tolerance for stale data is demanded),
            both are discussed below.
        </para>

        <para>
            In either situation, you will need to ensure your ConnectionManager is configured
            to return an appropriate DB identifier.
        </para>

        <example>
            <title>Reladomo ConnectionManager getDatabaseIdentifier example implementation</title>
            <programlisting language="java"><![CDATA[
public String getDatabaseIdentifier() {
    return serverName + ":" + schema;  // must not return null
}
]]></programlisting>
        </example>

        <section>
            <title>Single Notification</title>

            <para>
                This type leverages a single Notification server, and is very easy to configure
                in each of your JVM processes.
                At some point in your applications Reladomo instance initialization, add the following lines:
            </para>

            <example>
                <title>Reladomo single TCP initialization fragment</title>
                <programlisting language="java"><![CDATA[
MithraManagerProvider.getMithraManager().setNotificationEventManager(
        new MithraNotificationEventManagerImpl(
                new TcpMessagingAdapterFactory(host, port)));
]]></programlisting>
            </example>
        </section>

        <section>
            <title>Dual Notification</title>

            <para>
                This type leverages two Notification servers, and is very easy to configure
                in each of your JVM processes.
                At some point in your applications Reladomo instance initialization, add the following lines:
            </para>

            <example>
                <title>Reladomo dual TCP initialization fragment</title>
                <programlisting language="java"><![CDATA[
MithraManagerProvider.getMithraManager().setNotificationEventManager(
        new MithraNotificationEventManagerImpl(
                new TcpDualMessagingAdapterFactory(host1, port1, host2, port2)));
]]></programlisting>
            </example>

            <para>
                With this configuration, notification messages are duplicated using redundant communication clients
                to redundant Notification servers.
            </para>
        </section>

        <section>
            <title>Starting a Notification Server</title>

            <para>
                Reladomo ships with all the necessary libraries to launch a Notification server,
                so starting a new instance is very easy:
            </para>

            <example>
                <title>Command line to launch a Notification Server</title>
                <programlisting language="script"><![CDATA[
java -classpath <all the required jars> -Dport=<port number>
        com.gs.fw.common.mithra.notification.server.NotificationServer
]]></programlisting>
            </example>

            <para>
                If you are using dual-notification, you will need to do this twice,
                preferably on two different physical machines (for better robustness).
            </para>
        </section>
    </section>

    <section>
        <title>Anything else I should consider?</title>

        <para>
            Yes.
        </para>

        <section>
            <title>cacheTimeToLive</title>

            <para>
                We strongly recommend setting a <code>cacheTimeToLive</code> value of 5 minutes (a.k.a. 300,000 ms)
                in your Reladomo runtime-XML configurations for all the <code>partialCache</code> types.  E.g.:
            </para>

            <example>
                <title>Reladomo Runtime XML file cache configuration fragment</title>
                <programlisting language="xml"><![CDATA[
<MithraObjectConfiguration className="com.gs.dept.app.domain.Order" cacheType="partial" cacheTimeToLive="300000" />
]]></programlisting>
            </example>

            <para>
                Should connectivity be lost to a Notification server, but the DB connection is still good,
                JVM processes can continue to work, but are at a small risk of having stale data,
                hence a time-out for cached data helps maintain data freshness whilst
                also helping to minimize peak memory usage.
            </para>
        </section>

        <section>
            <title>Data integrity</title>

            <para>
                If connectivity to a Notification server is lost, but the DB connection is still good,
                JVM processes can continue to work, but are at a small risk of having stale data.
                You can minimize this by setting the <code>cacheTimeToLive</code> value as shown above.
                Also note that any transactional data being updated will be protected due to a
                combination of the transaction enrolling data rows being modified and optimistic locking.
            </para>
        </section>
    </section>

</article>