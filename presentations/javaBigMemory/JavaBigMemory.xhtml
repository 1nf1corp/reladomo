<?xml version="1.0" encoding="UTF-8"?><html xmlns="http://www.w3.org/1999/xhtml"><head><title/><meta name="copyright" content=""/><link type="text/css" href="user.css" rel="stylesheet"/><script type="text/javascript" charset="utf-8" src="files/slidy/scripts/slidy.js"/></head><body><div class="background"/><div class="slide cover title"><h1 class="title">Java Big Memory</h1></div><a name="N10013"/><div class="slide">
        <h1 class="title">Java Big Memory: Replication for Resiliency and Load Balancing of Milestoned Data</h1>

        <p>
            Mohammad Rezaei
        </p>
        <p>
            June 2014
        </p>
    </div><a name="N1001F"/><div class="slide">
        <h1 class="title">
            Agenda
        </h1>

        <ul class=""><li class="listitem"><p>What is cache replication?</p></li><li class="listitem"><p>Motivation</p></li><li class="listitem"><p>When is replication appropriate?</p></li><li class="listitem"><p>C-heap data storage and Strings</p></li><li class="listitem"><p>How does replication work?</p></li><ul class=""><li class="listitem"><p>MasterCacheService</p></li><li class="listitem"><p>Replication data organization</p></li><li class="listitem"><p>Replication data stream</p></li><li class="listitem"><p>Master sync algorithm</p></li><li class="listitem"><p>Replica sync algorithm</p></li><li class="listitem"><p>Removing data from the master cache</p></li><li class="listitem"><p>Restarting Master</p></li></ul><li class="listitem"><p>Milestone Consistency</p></li><li class="listitem"><p>Performance numbers</p></li></ul>
    </div><a name="N10052"/><div class="slide">
        <h1 class="title">
            What is replication?
        </h1>
        <ul class=""><li class="listitem"><p>Cache replication involves copying data from a
                    <span class="emphasis"><em>master</em></span>
                    cache to one or more
                    <span class="emphasis"><em>replica</em></span>
                    caches.
                </p></li><li class="listitem"><p>Replication has to correctly copy the data so that:</p></li><ul class=""><li class="listitem"><p>No data is missing</p></li><li class="listitem"><p>When master is updated, the replica can catch up (efficiently).</p></li><li class="listitem"><p>The application knows the status of the replication so it can construct correct queries (it
                        must
                        not query data that the replica doesn’t have).
                    </p></li></ul><li class="listitem"><p>Each Reladomo class has its own cache. Replication is performed at the same (class) level.</p></li><li class="listitem"><p>A replica typically has a single master, but it may have multiple masters (for different
                    domains/classes).
                </p></li><li class="listitem"><p>A replica can have non-replicated classes.</p></li><li class="listitem"><p>A replicated class is read-only on the replica.</p></li></ul>
    </div><a name="N1007C"/><div class="slide">
        <h1 class="title">
            Why an in-memory store?
        </h1>
        <ul class=""><li class="listitem"><p>"Gartner Says In-Memory Computing Is Racing Towards Mainstream Adoption"</p></li></ul>
        <ul class=""><li class="listitem"><p>http://www.gartner.com/newsroom/id/2405315</p></li><li class="listitem"><p>
                    http://www.slideshare.net/SAP_Nederland/the-next-generation-architecture-inmemory-computing-massimo-pezzini
                </p></li></ul>
        <div class=""><table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;"><tr><td align="center" valign="middle"><img src="JavaBigMemory_4_1.png" align="middle"/></td></tr></table></div>
    </div><a name="N10098"/><div class="slide">
        <h1 class="title">
            Why an in-memory store?
        </h1>
        <div class=""><table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;"><tr><td align="center" valign="middle"><img src="JavaBigMemory_5_1.png" align="middle"/></td></tr></table></div>
    </div><a name="N100A7"/><div class="slide">
        <h1 class="title">
            Why an in-memory store?
        </h1>
        <div class=""><table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;"><tr><td align="center" valign="middle"><img src="JavaBigMemory_6_1.png" align="middle"/></td></tr></table></div>
    </div><a name="N100B6"/><div class="slide">
        <h1 class="title">
            Technical advantages of an in-memory store
        </h1>
        <ul class=""><li class="listitem"><p>Latency numbers every programmer should know:
                </p></li></ul>
        <p>L1 cache reference ......................... 0.5 ns</p>
        <p>Branch mispredict ............................ 5 ns</p>
        <p>L2 cache reference ........................... 7 ns</p>
        <p>Mutex lock/unlock ........................... 25 ns</p>
        <p>Main memory reference ...................... 100 ns</p>
        <p>SSD random read ........................ 150,000 ns = 150 µs</p>
        <p>Round trip within same datacenter ...... 500,000 ns = 0.5 ms</p>
        <p>Disk seek ........................... 10,000,000 ns = 10 ms</p>
        <p>Send packet CA-&gt;Netherlands-&gt;CA .... 150,000,000 ns = 150 ms</p>
        <ul class=""><li class="listitem"><p>Bandwidth numbers:</p></li></ul>
        <p>Read 1 MB seq. from memory ................ 20,000 ns = 20 µs</p>
        <p>Read 1 MB seq. from FiberChannel ......... 400,000 ns = 400 µs</p>
        <p>Read 1 MB seq. from SSD ................ 2,000,000 ns = 2 ms</p>
        <p>Read 1 MB seq. over 1 Gbps network .... 10,000,000 ns = 10 ms</p>
        <p>Read 1 MB seq. from disk .............. 20,000,000 ns = 20 ms</p>
        <ul class=""><li class="listitem"><p>Disks suffer from physical seek contention.</p></li><li class="listitem"><p>Networks suffer from line/router contention.</p></li></ul>
    </div><a name="N100F8"/><div class="slide">
        <h1 class="title">
            Motivation
        </h1>
        <ul class=""><li class="listitem"><p>Certain problems are best solved in memory.</p></li><ul class=""><li class="listitem"><p>A low collapse factor aggregation where the aggregation can happen along any dimension is such
                        an example.
                    </p></li></ul><li class="listitem"><p>Storing large amounts of data in memory causes some issues.</p></li><ul class=""><li class="listitem"><p>GC – a Full GC can bring all processing to a halt</p></li><li class="listitem"><p>Low resiliency: recover time can be very large.</p></li></ul><li class="listitem"><p>Replication has the following benefits:</p></li><ul class=""><li class="listitem"><p>A replicated cache is more resilient: if a replica goes down, other replica can still
                        function.
                    </p></li><li class="listitem"><p>Replication adds horizontal scalability to a system. Queries should be load balanced across
                        replicas.
                    </p></li><li class="listitem"><p>Recovery is much faster: it’s faster to shutdown/restart a replica than reload from a database
                        or
                        cache archive.
                    </p></li><li class="listitem"><p>Since only the master cache interacts with the database, the database load is lower than
                        having
                        all
                        caches talk to the database.
                    </p></li></ul></ul>
    </div><a name="N10121"/><div class="slide">
        <h1 class="title">
            When is replication a good fit?
        </h1>
        <ul class=""><li class="listitem"><p>An application using replication should fit the following profile:</p></li><ul class=""><li class="listitem"><p>Heavy read, no write (to the replicated classes).</p></li><li class="listitem"><p>Can load balance queries between replicas.</p></li><li class="listitem"><p>Large amounts of data (many GB).</p></li><li class="listitem"><p>Configured for C-heap (only dated objects can go on the C-heap).</p></li><li class="listitem"><p>Data is loaded via the Mithra CacheLoader.xml. Master cache is configured for periodic refresh
                        from
                        the database.
                    </p></li><li class="listitem"><p>All queries have a non-infinity processing date (aka snapshot). 9</p></li></ul></ul>
    </div><a name="N1013F"/><div class="slide">
        <h1 class="title">
            Reladomo Java-heap only memory layout
        </h1>
        <div class=""><table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;"><tr><td align="center" valign="middle"><img src="JavaBigMemory_10_1.png" align="middle"/></td></tr></table></div>
    </div><a name="N1014E"/><div class="slide">
        <h1 class="title">
            Reladomo C and Java-heap memory layout
        </h1>
        <div class=""><table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;"><tr><td align="center" valign="middle"><img src="JavaBigMemory_11_1.png" align="middle"/></td></tr></table></div>
    </div><a name="N1015D"/><div class="slide">
        <h1 class="title">
            C-heap data storage and Strings
        </h1>
        <ul class=""><li class="listitem"><p>MithraData objects are stored on the C-heap in a contiguous chunk of memory (per class).</p></li><li class="listitem"><p>Each data object occupies a fixed number of bytes in a fixed format.</p></li><ul class=""><li class="listitem"><p>E.g. the first 4 bytes is an integer account id; the next 8 bytes is the double quantity, etc.
                    </p></li></ul><li class="listitem"><p>Strings are not primitives and can’t be stored on the C-heap.</p></li><li class="listitem"><p>Reladomo assigns a unique integer id to every String and stores this on the C- heap.</p></li><li class="listitem"><p>A simple String array is kept on-heap. The array index of a String is the same number that’s
                    stored on the c-heap for all occurrences of that String.
                </p></li><li class="listitem"><p>What makes Strings and replication tricky is that the integers assigned to the Strings in the
                    replica may not be the same as the ones on the master!
                </p></li><ul class=""><li class="listitem"><p>This can easily happen if the replica has non-replicated classes or multiple masters.</p></li></ul></ul>
    </div><a name="N1017F"/><div class="slide">
        <h1 class="title">
            Replication data organization
        </h1>
        <ul class=""><li class="listitem"><p>MithraData objects are stored on the C-heap in a contiguous chunk of memory (per class).</p></li><li class="listitem"><p>We only replicate the object data and not the indices.</p></li><li class="listitem"><p>Every 1024 objects are called a<span class="emphasis"><em>page</em></span>.
                </p></li><li class="listitem"><p>Every page has a long page version. Version "0" is reserved for "dirty".</p></li><li class="listitem"><p>On the master, any write to the C-heap marks the corresponding page as dirty. Replicas are
                    read-only; the only writes are through replication.
                </p></li><li class="listitem"><p>Each class has a long<span class="emphasis"><em>currentPageVersion</em></span>.
                </p></li><li class="listitem"><p>Every time a call from a replica arrives, the master cache is locked, the currentPageVersion is
                    incremented, all dirty pages are assigned the new currentPageVersion, and finally the cache is
                    unlocked.
                </p></li><li class="listitem"><p>One of the core implementation criteria for replication is that there must never be any cache
                    locks while data is sent on the network.
                </p></li><li class="listitem"><p>Each replica knows the last synced currentPageVersion (per class). This value is included in the
                    call to sync.
                </p></li><li class="listitem"><p>Conceptually, the master looks for pages that have a higher page version and sends only those.
                </p></li></ul>
    </div><a name="N101AB"/><div class="slide">
        <h1 class="title">
            Replication data stream
        </h1>
        <ul class=""><li class="listitem"><p>The data stream between the master and replica caches is organized in terms of pages.</p></li><li class="listitem"><p>The replica calls into the master cache, telling it what the max page version is that the replica
                    has synced to.
                </p></li><li class="listitem"><p>The master cache looks for any pages that have a higher page version and sends them to the
                    replica.
                </p></li><li class="listitem"><p>The tricky part is to do this without holding a lock while transferring data and still keep the
                    data consistent.
                </p></li><li class="listitem"><p>The main solution is to hold a lock, copy data elsewhere, release the lock and then transfer the
                    copied version.
                </p></li><li class="listitem"><p>To avoid using large amounts of memory, the amount of data copied is limited to 10 pages.</p></li><li class="listitem"><p>There is a separate call to sync strings.</p></li><li class="listitem"><p>MithraCacheUplink holds a map of the local (replica) integers to the master integers.</p></li><li class="listitem"><p>When data arrives at the replica, the string integers are replaced with the local value.</p></li></ul>
    </div><a name="N101CE"/><div class="slide">
        <h1 class="title">
            Master sync algorithm
        </h1>
        <ul class=""><li class="listitem"><p>Under a lock, the pages that have to be sent are computed.</p></li><li class="listitem"><p>If the number of pages to send is less than 10, the pages are copied (still under lock) and the
                    lock is released. The copied pages are sent and we’re done.
                </p></li><li class="listitem"><p>If the number of pages to send is greater than 10, they are sent in batches.</p></li><li class="listitem"><p>For each batch (10 pages), the cache is locked, we look at the page versions for that batch, if
                    nothing has changed, we copy the pages, release
                    the lock and send the pages.
                </p></li><li class="listitem"><p>If something has changed, we re-scan the cache for pages that need to be sent and restart from the
                    beginning.
                </p></li><li class="listitem"><p>A replica can therefore see the same page more than once in its incoming stream. It’ll ignore the
                    older copies.
                </p></li><li class="listitem"><p>See the algorithm in FastUnsafeOffHeapDataStorage.serializeSyncResult</p></li></ul>
    </div><a name="N101EB"/><div class="slide">
        <h1 class="title">
            Heap State before Sync
        </h1>
        <div class=""><table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;"><tr><td align="center" valign="middle"><img src="JavaBigMemory_16_1.png" align="middle"/></td></tr></table></div>
    </div><a name="N101FA"/><div class="slide">
        <h1 class="title">
            Initial Page Scan
        </h1>
        <div class=""><table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;"><tr><td align="center" valign="middle"><img src="JavaBigMemory_17_1.png" align="middle"/></td></tr></table></div>
    </div><a name="N10209"/><div class="slide">
        <h1 class="title">
            First Group Sent
        </h1>
        <div class=""><table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;"><tr><td align="center" valign="middle"><img src="JavaBigMemory_18_1.png" align="middle"/></td></tr></table></div>
    </div><a name="N10218"/><div class="slide">
        <h1 class="title">
            Cache is updated during first group send
        </h1>
        <div class=""><table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;"><tr><td align="center" valign="middle"><img src="JavaBigMemory_19_1.png" align="middle"/></td></tr></table></div>
    </div><a name="N10227"/><div class="slide">
        <h1 class="title">
            Second Group Sent
        </h1>
        <div class=""><table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;"><tr><td align="center" valign="middle"><img src="JavaBigMemory_20_1.png" align="middle"/></td></tr></table></div>
    </div><a name="N10236"/><div class="slide">
        <h1 class="title">
            Third Group Rescan
        </h1>
        <div class=""><table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;"><tr><td align="center" valign="middle"><img src="JavaBigMemory_21_1.png" align="middle"/></td></tr></table></div>
    </div><a name="N10245"/><div class="slide">
        <h1 class="title">
            Third Group Sent
        </h1>
        <div class=""><table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;"><tr><td align="center" valign="middle"><img src="JavaBigMemory_22_1.png" align="middle"/></td></tr></table></div>
    </div><a name="N10254"/><div class="slide">
        <h1 class="title">
            Fourth Group Sent
        </h1>
        <div class=""><table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;"><tr><td align="center" valign="middle"><img src="JavaBigMemory_23_1.png" align="middle"/></td></tr></table></div>
    </div><a name="N10263"/><div class="slide">
        <h1 class="title">
            Replica sync algorithm
        </h1>
        <ul class=""><li class="listitem"><p>The replica receives a set of pages from the master.</p></li><li class="listitem"><p>Each page has a page number, page version, page data and used data array.</p></li><li class="listitem"><p>The used data array is a bit set representing which data slots on a page are actually used.</p></li><li class="listitem"><p>The replica then has to compare the incoming page with the exiting page (if any) and correctly
                    update its local cache indices according to the modified data.
                </p></li></ul>
        <div class=""><table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;"><tr><td align="center" valign="middle"><img src="JavaBigMemory_24_1.png" align="middle"/></td></tr></table></div>

    </div><a name="N10280"/><div class="slide">
        <h1 class="title">
            Removing data from the master cache
        </h1>
        <ul class=""><li class="listitem"><p>It is occasionally useful to remove data from a cache (e.g. drop a date).</p></li><li class="listitem"><p>It is critical that the data not be currently in use on any replica.</p></li><li class="listitem"><p>This has to be implemented at the application level. The typical implementation uses a quiesce
                    algorithm:
                </p></li><ul class=""><li class="listitem"><p>The application will disallow any further queries involving the data.</p></li><li class="listitem"><p>It will then wait for all running queries to finish.</p></li><li class="listitem"><p>Finally, it can remove the data from the master.</p></li></ul><li class="listitem"><p>Removed data is marked for deletion on the replica. The data object is only</p></li><li class="listitem"><p>Once the GC removes the reference, the data is released and the slot is marked as unused.</p></li><li class="listitem"><p>If the GC cycle happens faster on the master, it’s possible that the data on the replica is not
                    fully released yet.
                </p></li><li class="listitem"><p>If new data is added to the master, its possible that the data on the replica has to be thrown
                    away (destroyed).
                </p></li><li class="listitem"><p>Any destroyed data will throw exceptions if accessed. That’s why it’s critical the application has
                    safeguards against referencing deleted data.
                </p></li></ul>
    </div><a name="N102AB"/><div class="slide">
        <h1 class="title">
            Restarting Master
        </h1>
        <ul class=""><li class="listitem"><p>The data synchronization between the master and replica is based on the physical layout of the
                    data on the master.
                </p></li><li class="listitem"><p>The physical layout of the data can’t be easily reproduced if the master goes down.</p></li><li class="listitem"><p>Therefore, when a master goes down, the running replicas cannot switch to a new master. A replica
                    that has lost its master is called a ronin.
                </p></li><li class="listitem"><p>To restart the replica, the following procedure must be implemented:</p></li><ul class=""><li class="listitem"><p>A new master is started.</p></li><li class="listitem"><p>A single replica is quiesced (no new queries are allowed, existing queries run to completion).
                    </p></li><li class="listitem"><p>The replica is then shutdown and restarted pointing to the new master.</p></li><li class="listitem"><p>The steps are repeated for other replicas until they are all on the new master.</p></li><li class="listitem"><p>Queries can be served from either the new or old replicas while the procedure is continuing.
                    </p></li></ul></ul>
    </div><a name="N102CF"/><div class="slide">
        <h1 class="title">
            Milestone Consistency
        </h1>
        <ul class=""><li class="listitem"><p>Central question:</p></li><ul class=""><li class="listitem"><p>How do we query the replicas (that may be in different sync states) and get consistent
                        results?
                    </p></li></ul><li class="listitem"><p>The question exists even when we don't have replication, because we read many different types of
                    data
                    out of the database
                </p></li><ul class=""><li class="listitem"><p>It's just as important that the trade data and product data it joins to are consistent</p></li></ul><li class="listitem"><p>We'll cover this in three steps:</p></li><ul class=""><li class="listitem"><p>How can this be done with a query against a database?</p></li><li class="listitem"><p>How can this be done with a query against a singular cache?</p></li><li class="listitem"><p>
                        How can this be done with replication?
                    </p></li></ul></ul>
    </div><a name="N102F2"/><div class="slide">
        <h1 class="title">
            Milestone Consistency: Queries and Mutation
        </h1>
        <ul class=""><li class="listitem"><p>In a system that implements audit milestoning, we have to understand when a query is guaranteed to
                    be repeatable.
                </p></li><ul class=""><li class="listitem"><p>The query must refer to a fixed point in time that is guaranteed to never mutate.</p></li></ul><li class="listitem"><p>All mutations occur within the context of a transaction.</p></li><li class="listitem"><p>All objects in the same transaction have the same mutation time, which is taken to be the
                    transaction start time.
                </p></li><li class="listitem"><p>"now" is not a fixed point (yet), because there may be transactions in flight that have started
                    and not finished yet.
                </p></li><li class="listitem"><p>It is imperative for all transactions to have a guaranteed timeout. 2 minutes is our production
                    setting.
                </p></li><ul class=""><li class="listitem"><p>"now" is not fixed, but "now - 2 minutes" is. We usually add a little bit for clock
                        synchronization, e.g. "now- 2.5 minutes", which we'll call
                        <span class="emphasis"><em>"stability time"</em></span>
                    </p></li></ul><li class="listitem"><p>So when doing queries against the DB, a query of the form IN &lt;= processingTime &amp;&amp; &gt;
                    processingTime is guaranteed to be correct if processingtime less than stability time.
                </p></li></ul>
    </div><a name="N10317"/><div class="slide">
        <h1 class="title">
            Milestone Consistency: Master Cache
        </h1>
        <ul class=""><li class="listitem"><p>A cache (master or stand alone) maintains its own stability time (sometime called "now snapshot").
                </p></li><li class="listitem"><p>When a cache performs a refresh, it asks for all data newer than its current stability time, but
                    older than database stability time. when the refresh is
                    finished, the cache's stability time is moved forward.
                </p></li><ul class=""><li class="listitem"><p>Example:</p></li><ul class=""><li class="listitem"><p>Wall clock: 4:11:00 pm</p></li><li class="listitem"><p>DB stability time: 4:08:30 pm</p></li><li class="listitem"><p>Cache stability time 4:00:00 pm</p></li><li class="listitem"><p>at 4:11, cache asks for data between 4:00:00 and 4:08:30. refresh finishes at 4:15.
                            cache's stability time is moved to 4:08:30
                        </p></li></ul></ul></ul>
    </div><a name="N10336"/><div class="slide">
        <h1 class="title">
            Master &amp; replica database refresh time
        </h1>
        <ul class=""><li class="listitem"><p>Reladomo cache loader has a periodic refresh.</p></li><li class="listitem"><p>This refresh is running on the master.</p></li><li class="listitem"><p>A refresh cycle picks a refresh time, does a database refresh across all classes and marks them
                    with the new refresh time.
                </p></li><li class="listitem"><p>As part of the master-replica sync, this refresh value is sent to the replica (per class).</p></li><li class="listitem"><p>The replica can then compute the minimum refresh time from all its classes to arrive at the
                    replica refresh time.
                </p></li><ul class=""><li class="listitem"><p>It’s possible different classes have different refresh times on the replica because the sync
                        guarantee is on a per-class basis.
                    </p></li><li class="listitem"><p>A replica may also have multiple masters, which will naturally have different refresh times.
                    </p></li></ul><li class="listitem"><p>The application must be aware of this refresh time and construct all queries accordingly
                    (processing date must not be greater than the refresh time).
                </p></li></ul>
    </div><a name="N10357"/><div class="slide">
        <h1 class="title">
            Performance numbers
        </h1>
        <ul class=""><li class="listitem"><p>100 GB cache, takes 3.5 hours to load from database.</p></li><li class="listitem"><p>10.8 GB compressed cache archive.</p></li><li class="listitem"><p>About 24 minutes to read the cache archive on a bare metal.</p></li><li class="listitem"><p>BM master to BM replica takes about 8 minutes to sync with 15 threads.</p></li><li class="listitem"><p>
                    Subsequent refresh syncs take a few seconds.
                </p></li></ul>
    </div><a name="N1036E"/><div class="slide">
        <h1 class="title">
            Conclusion
        </h1>
        <ul class=""><li class="listitem"><p>As we solve the problems of large Java memory foot print, we start to run a new set of problems.
                </p></li><ul class=""><li class="listitem"><p>Resiliency</p></li><ul class=""><li class="listitem"><p>Single point of failure.</p></li><li class="listitem"><p>Time to recover.</p></li></ul><li class="listitem"><p>Processing power</p></li><ul class=""><li class="listitem"><p>Servicing a large number of requests from many users/systems.</p></li><li class="listitem"><p>Dealing with application growth over time.</p></li></ul></ul><li class="listitem"><p>Replication can be an effective way to address these issues.</p></li><ul class=""><li class="listitem"><p>It has to be combined with</p></li><ul class=""><li class="listitem"><p>C-heap storage</p></li><li class="listitem"><p>Proper milestoning</p></li><li class="listitem"><p>Smart loadbalancing</p></li><li class="listitem"><p>
                            Proper refresh
                        </p></li></ul></ul></ul>
    </div><a name="N103A2"/><div class="slide">
        <h1 class="title">
            Appendix: Configuring Replication
        </h1>
        <ul class=""><li class="listitem"><p>A master cache is configured by enabling MasterCacheService on the server.</p></li><ul class=""><li class="listitem"><p>That usually means adding a PSP service that uses MasterCacheService/Impl for its interface
                        and implementation.
                    </p></li></ul><li class="listitem"><p>A replica cache is configured by adding MasterCacheReplicationServer to the runtime
                    configuration.
                </p></li><li class="listitem"><pre class="programlisting">
<strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&lt;MithraRuntime&gt;</strong>
    <strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&lt;MasterCacheReplicationServer</strong> <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">masterCacheId</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"mithra.test.master"</span>
                                  <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">className</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"com.gs.fw.common.mithra.test.util.PspBasedMithraMasterServerFactory"</span>
                                  <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">syncIntervalInMilliseconds</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"2000"</span><strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">/&gt;</strong>
<strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&lt;/MithraRuntime&gt;</strong>
</pre></li><li class="listitem"><p>The replica will create a MasterCacheUplink for every configured master.</p></li><li class="listitem"><p>The job of the MasterCacheUplink is to use the remote MasterCacheService and keep the replica in
                    sync with the
                    master.
                </p></li><li class="listitem"><p>Periodically, the uplink will poll the master cache to get new updates.</p></li><li class="listitem"><p>The process of copying the data to the replica is called "sync".</p></li><li class="listitem"><p>During each sync, the uplink uses a fixed (configurable) number of threads to poll the master.
                </p></li></ul>
    </div><a name="N103C7"/><div class="slide">
        <h1 class="title">
            Appendix: MasterCacheService
        </h1>
        <ul class=""><li class="listitem"><p>public RemoteMithraObjectConfig[] getObjectConfigurations();</p></li><ul class=""><li class="listitem"><p>Used for getting the initial configuration from the master cache.</p></li></ul><li class="listitem"><p>public MasterSyncResult syncWithMasterCache(String businessClassName, long
                    maxReplicatedPageVersion);
                </p></li><ul class=""><li class="listitem"><p>The main method that gets called periodically for each class.</p></li></ul><li class="listitem"><p>public MasterRetrieveStringResult retrieveStrings(int startIndex);</p></li><ul class=""><li class="listitem"><p>Strings need special handling. More on this later.</p></li></ul><li class="listitem"><p>public MasterRetrieveInitialSyncSizeResult retrieveInitialSyncSize();</p></li><ul class=""><li class="listitem"><p>
                        Used to optimize the initial sync. Larger classes are synced first.
                    </p></li></ul></ul>
    </div></body></html>